continue
expected_response[:customer][:products].map { |data| JSON.parse(data.to_json, symbolize_names: true) }
expected_response[:customer][:products].map { |data| JSON.parse(data.to_json) }
expected_response[:customer][:products].map { |data| data.to_json }
expected_response[:customer][:products].map { |data| data.hash }
expected_response[:customer][:products].map { |data| data.to_hash }
expected_response[:customer][:products].map { |data| data.to_h }
expected_response[:customer][:products].map { |data| data }
expected_response[:customer][:products].map { data: data 
expected_response[:customer][:products].to_a
expected_response[:customer][:products]
json_response[:customer][:products]
json_response[:customer].except(:products, :orders)
expected_response[:customer].except(:products, :orders)
expected_response
Order.count
expected_response[:customer][:orders].count
OrderProduct.count
expected_response[:customer][:products].count
expected_response[:customer
continue
expected_response
json_response
ap
continue
order
continue
json_response
continue
order.reload.total
order.order_products.first.price
order.order_products.first.quantity
order.order_products.quantity
order.order_products.tquantity
order.order_products.ttotal
order.order_products
order
continue
order.order_products.last
order.order_products.reload
order.order_products.last
order.order_products.first
order.order_products.count
order.order_products
order.customer
order
order_product.order
order_product
order.order_products
oreder.total
order
continue
json_response
continue
json_response
continue
json_response
expected_response
json_response
continue
e.record.errors.full_messages
e.record
@category.errors
e.message
e
continue
PaperTrail::Version.all
PaperTrail::Version
continue
action
method.to_s
show
method
continue
path
method('a')
method(1)
method
path
action
continue
  it { expect(method => path).to route_to({ format: :json, controller: controller, action: action.to_s }.merge(params || {})) }
\
 expect(method => path)
method => path
method
continue
e
continue
JwtService.encode
JwtService
e
continue
e
continue
e
